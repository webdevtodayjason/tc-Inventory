"""Add read-only mode configuration

Revision ID: c24d97f2675d
Revises: a97181e8b76e
Create Date: 2025-02-06 11:53:45.830234

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c24d97f2675d'
down_revision = 'a97181e8b76e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('inventory_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('checkout_reason', sa.String(length=100), nullable=True),
    sa.Column('is_mobile', sa.Boolean(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('transactions')
    with op.batch_alter_table('benchmark_result', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'computer_systems', ['system_id'], ['id'])

    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.alter_column('category_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('computer_model', schema=None) as batch_op:
        batch_op.alter_column('manufacturer',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('model_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_index('idx_computer_model_manufacturer')
        batch_op.drop_index('idx_computer_model_model_name')
        batch_op.drop_index('idx_computer_model_type')
        batch_op.drop_column('notes')
        batch_op.drop_column('description')

    with op.batch_alter_table('computer_systems', schema=None) as batch_op:
        batch_op.alter_column('tracking_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('model_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('cpu_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('ram',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=50),
               nullable=True)
        batch_op.alter_column('storage',
               existing_type=sa.VARCHAR(length=128),
               type_=sa.String(length=100),
               nullable=True)
        batch_op.alter_column('os',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               nullable=True)
        batch_op.drop_index('computer_systems_tracking_id_key')
        batch_op.drop_index('idx_computer_systems_checked_out_by')
        batch_op.drop_index('idx_computer_systems_location')
        batch_op.drop_index('idx_computer_systems_serial_number')
        batch_op.drop_index('idx_computer_systems_serial_tag')
        batch_op.drop_index('idx_computer_systems_status')
        batch_op.drop_index('idx_computer_systems_test_status')
        batch_op.create_unique_constraint(None, ['tracking_id'])
        batch_op.drop_constraint('computer_systems_creator_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('computer_systems_tested_by_fkey', type_='foreignkey')
        batch_op.drop_column('tested_at')
        batch_op.drop_column('network_notes')
        batch_op.drop_column('test_status')
        batch_op.drop_column('general_notes')
        batch_op.drop_column('network_status')
        batch_op.drop_column('video_notes')
        batch_op.drop_column('test_notes')
        batch_op.drop_column('creator_id')
        batch_op.drop_column('video_status')
        batch_op.drop_column('tested_by')
        batch_op.drop_column('storage_location')
        batch_op.drop_column('serial_tag')
        batch_op.drop_column('usb_ports_status')
        batch_op.drop_column('usb_ports_notes')
        batch_op.drop_column('cpu_benchmark')

    with op.batch_alter_table('configuration', schema=None) as batch_op:
        batch_op.alter_column('key',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('value',
               existing_type=sa.TEXT(),
               type_=sa.String(length=256),
               existing_nullable=True)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=256),
               existing_nullable=True)
        batch_op.drop_index('configuration_key_key')
        batch_op.create_unique_constraint(None, ['key'])

    with op.batch_alter_table('cpu', schema=None) as batch_op:
        # First update NULL values
        op.execute("UPDATE cpu SET speed = 1.0 WHERE speed IS NULL")
        op.execute("UPDATE cpu SET cores = 1 WHERE cores IS NULL")
        
        batch_op.alter_column('manufacturer',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('speed',
               existing_type=sa.NUMERIC(precision=4, scale=2),
               type_=sa.Float(),
               nullable=False,
               server_default='1.0')
        batch_op.alter_column('cores',
               existing_type=sa.INTEGER(),
               nullable=False,
               server_default='1')
        batch_op.alter_column('benchmark',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
        # Remove server defaults after columns are NOT NULL
        batch_op.alter_column('speed',
               existing_type=sa.Float(),
               server_default=None)
        batch_op.alter_column('cores',
               existing_type=sa.INTEGER(),
               server_default=None)
        batch_op.drop_index('idx_cpu_manufacturer')
        batch_op.drop_index('idx_cpu_model')
        batch_op.drop_column('socket')
        batch_op.drop_column('notes')
        batch_op.drop_column('description')
        batch_op.drop_column('tdp')

    with op.batch_alter_table('item_tags', schema=None) as batch_op:
        batch_op.drop_constraint('item_tags_tag_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('item_tags_item_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'items', ['item_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'tag', ['tag_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.drop_index('items_barcode_key')
        batch_op.drop_index('items_tracking_id_key')
        batch_op.drop_index('items_upc_key')
        batch_op.create_unique_constraint(None, ['barcode'])
        batch_op.create_unique_constraint(None, ['upc'])
        batch_op.create_unique_constraint(None, ['tracking_id'])
        batch_op.create_foreign_key(None, 'category', ['category_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['creator_id'], ['id'])
        batch_op.drop_column('type')

    with op.batch_alter_table('mobile_checkout_reasons', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_mobile_checkout_reasons_active')
        batch_op.drop_constraint('mobile_checkout_reasons_name_key', type_='unique')

    with op.batch_alter_table('mobile_device_tokens', schema=None) as batch_op:
        batch_op.add_column(sa.Column('device_type', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_mobile_device_tokens_token')
        batch_op.drop_index('idx_mobile_device_tokens_user')
        batch_op.drop_constraint('mobile_device_tokens_device_token_key', type_='unique')
        batch_op.drop_constraint('mobile_device_tokens_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('roadmap_items', schema=None) as batch_op:
        batch_op.drop_index('idx_roadmap_items_category')
        batch_op.drop_index('idx_roadmap_items_status')

    with op.batch_alter_table('roadmap_votes', schema=None) as batch_op:
        batch_op.drop_index('idx_roadmap_votes_item')
        batch_op.drop_index('idx_roadmap_votes_user')
        batch_op.drop_constraint('roadmap_votes_item_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('roadmap_votes_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'roadmap_items', ['item_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_index('tag_name_key')
        batch_op.create_unique_constraint(None, ['name'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('users_email_key')
        batch_op.drop_index('users_username_key')
        batch_op.create_unique_constraint(None, ['username'])
        batch_op.create_unique_constraint(None, ['email'])

    with op.batch_alter_table('wiki_category', schema=None) as batch_op:
        batch_op.drop_index('wiki_category_name_key')
        batch_op.create_unique_constraint(None, ['name'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('wiki_category', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('wiki_category_name_key', ['name'], unique=True)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('users_username_key', ['username'], unique=True)
        batch_op.create_index('users_email_key', ['email'], unique=True)

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('tag_name_key', ['name'], unique=True)

    with op.batch_alter_table('roadmap_votes', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('roadmap_votes_user_id_fkey', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('roadmap_votes_item_id_fkey', 'roadmap_items', ['item_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('idx_roadmap_votes_user', ['user_id'], unique=False)
        batch_op.create_index('idx_roadmap_votes_item', ['item_id'], unique=False)

    with op.batch_alter_table('roadmap_items', schema=None) as batch_op:
        batch_op.create_index('idx_roadmap_items_status', ['status'], unique=False)
        batch_op.create_index('idx_roadmap_items_category', ['category'], unique=False)

    with op.batch_alter_table('mobile_device_tokens', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('mobile_device_tokens_user_id_fkey', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_unique_constraint('mobile_device_tokens_device_token_key', ['device_token'])
        batch_op.create_index('idx_mobile_device_tokens_user', ['user_id'], unique=False)
        batch_op.create_index('idx_mobile_device_tokens_token', ['device_token'], unique=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('device_type')

    with op.batch_alter_table('mobile_checkout_reasons', schema=None) as batch_op:
        batch_op.create_unique_constraint('mobile_checkout_reasons_name_key', ['name'])
        batch_op.create_index('idx_mobile_checkout_reasons_active', ['is_active'], unique=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('description',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'inventory_item'::character varying"), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('items_upc_key', ['upc'], unique=True)
        batch_op.create_index('items_tracking_id_key', ['tracking_id'], unique=True)
        batch_op.create_index('items_barcode_key', ['barcode'], unique=True)

    with op.batch_alter_table('item_tags', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('item_tags_item_id_fkey', 'items', ['item_id'], ['id'])
        batch_op.create_foreign_key('item_tags_tag_id_fkey', 'tag', ['tag_id'], ['id'])

    with op.batch_alter_table('cpu', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tdp', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('socket', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.create_index('idx_cpu_model', ['model'], unique=False)
        batch_op.create_index('idx_cpu_manufacturer', ['manufacturer'], unique=False)
        batch_op.alter_column('benchmark',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.alter_column('cores',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('speed',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=4, scale=2),
               nullable=True)
        batch_op.alter_column('manufacturer',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('configuration', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('configuration_key_key', ['key'], unique=True)
        batch_op.alter_column('description',
               existing_type=sa.String(length=256),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('value',
               existing_type=sa.String(length=256),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('key',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('computer_systems', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cpu_benchmark', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('usb_ports_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('usb_ports_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('serial_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('storage_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tested_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('video_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('creator_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('test_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('video_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('network_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('general_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('test_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('network_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('computer_systems_tested_by_fkey', 'users', ['tested_by'], ['id'])
        batch_op.create_foreign_key('computer_systems_creator_id_fkey', 'users', ['creator_id'], ['id'])
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('idx_computer_systems_test_status', ['test_status'], unique=False)
        batch_op.create_index('idx_computer_systems_status', ['status'], unique=False)
        batch_op.create_index('idx_computer_systems_serial_tag', ['serial_tag'], unique=False)
        batch_op.create_index('idx_computer_systems_serial_number', ['serial_number'], unique=False)
        batch_op.create_index('idx_computer_systems_location', ['location'], unique=False)
        batch_op.create_index('idx_computer_systems_checked_out_by', ['checked_out_by_id'], unique=False)
        batch_op.create_index('computer_systems_tracking_id_key', ['tracking_id'], unique=True)
        batch_op.alter_column('os',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('storage',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=128),
               nullable=False)
        batch_op.alter_column('ram',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=64),
               nullable=False)
        batch_op.alter_column('cpu_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('model_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('tracking_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('computer_model', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.create_index('idx_computer_model_type', ['model_type'], unique=False)
        batch_op.create_index('idx_computer_model_model_name', ['model_name'], unique=False)
        batch_op.create_index('idx_computer_model_manufacturer', ['manufacturer'], unique=False)
        batch_op.alter_column('model_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('manufacturer',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.alter_column('category_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('benchmark_result', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('transactions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity_changed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], name='transactions_item_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='transactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.drop_table('inventory_transactions')
    # ### end Alembic commands ###
